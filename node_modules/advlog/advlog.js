// AdvJSLog

var path = require("path");

var logfilestream = require('logfilestream');
var fs = require('fs');


// logfile
var writelogstream = null;

// duration: 1 hrs ( 3600000 ), buffer: 1 sec ( 1000 ms ), files: 200  
var deflogConfig = '{"default":{"static":{"enable":0, "level":5,"information":0,"path":"./logs","duration":3600000,"buffer":1000,"files":200},"dynamic":{"enable":0, "level":5,"information":0},"els":{"level":5,"information":0,"server":"127.0.0.1","port":9200}},"dataflow":{"enable":1,"els":{"server":"127.0.0.1:9200"},"dynamic":{"enable":1}}}';
var loginfo = 'undefined';

const ONE_MIN   = 60000;   // 1 MIN
const ONE_DAY = 86400000 // 1 Day

var seq_counter = 0;
var g_enabllog = 1;

// ElasticSearch
/*
var g_els = require('./els_sdk.js');
var els_dmg_name = '';//global.AppName.toLowerCase() +'-debug-message';
var els_df_name  = '';//global.AppName.toLowerCase() +'-data-flow';
*/

Object.defineProperty(global, '__stack', {
	get: function() {
			var orig = Error.prepareStackTrace;
			Error.prepareStackTrace = function(_, stack) {
				return stack;
			};
			var err = new Error;
			Error.captureStackTrace(err, arguments.callee);
			var stack = err.stack;
			Error.prepareStackTrace = orig;
			return stack;
		}
});

Object.defineProperty(global, '__LINE__', {
	get: function() {
			return __stack[1].getLineNumber();
		}
});
    

Object.defineProperty(global, '__func__', {
    get: function() {
		return __stack[1].getFunctionName();
    }
});

Object.defineProperty(global, '__FILE__', {
    get: function() {
        return path.basename(__stack[1].getFileName());
    }
});

(function(){

      var _trace = console.trace;
    
      console.error = function(strMessage){
        var info = {};
        info.filename = path.basename(__stack[1].getFileName());
        info.linenum  = __stack[1].getLineNumber();
        info.fnName   = __stack[1].getFunctionName();
        advLogWrite(ERROR, strMessage, info );      
      };

      console.warn = function(strMessage){
        var info = {};
        info.filename = path.basename(__stack[1].getFileName());
        info.linenum  = __stack[1].getLineNumber();
        info.fnName   = __stack[1].getFunctionName();
        advLogWrite(WARN, strMessage, info );      
      };    
    
      console.log = function(strMessage){
        var info = {};
        info.filename = path.basename(__stack[1].getFileName());
        info.linenum  = __stack[1].getLineNumber();
        info.fnName   = __stack[1].getFunctionName();
        advLogWrite(INFO, strMessage, info );      
      };
    
      console.debug = function(strMessage){
        var info = {};
        info.filename = path.basename(__stack[1].getFileName());
        info.linenum  = __stack[1].getLineNumber();
        info.fnName   = __stack[1].getFunctionName();
        advLogWrite(DEBUG, strMessage, info );      
      };

      console.trace = function(strMessage){
        var info = {};
        info.filename = path.basename(__stack[1].getFileName());
        info.linenum  = __stack[1].getLineNumber();
        info.fnName   = __stack[1].getFunctionName();
        advLogWrite(TRACE, strMessage, info );   
        if( loginfo.default.dynamic.level >= LEVEL.TRACE && loginfo.default.dynamic.trace !== 0 )
            _trace(console, arguments);
      };    
      
})();

// DEBUG LEVEL
var LEVEL = {
    NONE:  0,
    CRASH: 1,
    ERROR: 2,
    WARN:  3,
    NOTICE:4,
    INFO:  5,
    DEBUG: 7,
    TRACE: 8,
    DUMP:  9,
    MAX:  10
}

var LEVEL_MSG = [{"n":"NONE"},{"n":"CRASH"},{"n":"ERROR"},{"n":"WARN"},{"n":"NOTICE"},{"n":"INFO"},{"n":"---"},{"n":"DEBUG"},{"n":"TRACE"},{"n":"DUMP"}];


Object.defineProperty(global, 'NONE', {
    get: function() {
        return LEVEL.NONE;
    }
});

Object.defineProperty(global, 'CRASH', {
    get: function() {
        return LEVEL.CRASH;
    }
});

Object.defineProperty(global, 'ERROR', {
    get: function() {
        return LEVEL.ERROR;
    }
});

Object.defineProperty(global, 'WARN', {
    get: function() {
        return LEVEL.WARN;
    }
});

Object.defineProperty(global, 'NOTICE', {
    get: function() {
        return LEVEL.NOTICE;
    }
});

Object.defineProperty(global, 'INFO', {
    get: function() {
        return LEVEL.INFO;
    }
});

Object.defineProperty(global, 'DEBUG', {
    get: function() {
        return LEVEL.DEBUG;
    }
});

Object.defineProperty(global, 'TRACE', {
    get: function() {
        return LEVEL.TRACE;
    }
});

Object.defineProperty(global, 'DUMP', {
    get: function() {
        return LEVEL.DUMP;
    }
});

global.getMSTime = function()
{
    return new Date().getTime();
}

global.getISOTime = function()
{
    //return new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');     // delete the dot and everything after    
    //return new Date().toISOString().replace(/T/, ' ').replace(/Z/,'');     // delete the dot and everything after    
    //return new Date().toISOString().replace(/Z/,'').replace('T','');     // delete the dot and everything after    
    return new Date().toLocaleString();     // delete the dot and everything after    
}  

global.appendDataLog = function( msg )
{
  if( typeof msg === 'undefined') return -1;

  // dataFlow
  if( typeof msg.dataFlow === 'undefined')
      msg.dataFlow = global.AppName;  // From this node
  else
  {
    var path = msg.dataFlow + '/' + global.AppName;
    msg.dataFlow = path;
  }
    

  // seq & srcTs
  if( typeof msg.seq == 'undefined' )
  {
    var srcTs = getMSTime();      
    ++seq_counter;
    msg.seq = seq_counter + '_' + srcTs;   
    msg.srcTs = srcTs; 
  }

  return 0;
}




global.advDataflowWrite = function ( type, seq, dataFlow, msg )
{
    if( loginfo === 'undefined' || loginfo.dataflow.enable !== 1 ) return;

    if( typeof dataFlow === 'undefined' || dataFlow === '') return;

    var data = '';

    //var time = getISOTime();
    var ts = getMSTime();
    var time = new Date(ts).toISOString().replace(/Z/,'');

    data = '[' + time +'] ['+global.AppName+'] ['+ type + '] ['+seq+'] ['+dataFlow+'] ['+msg+']';

    if( typeof loginfo.dataflow.els !== 'undefined' )
    {        
        //console.log('advData= '+ dataFlow );
        var ts = seq.split("_");
        var table = dataFlow.split("/");
        var _index = "";
        if( typeof table === 'undefined')
            _index = dataFlow;
        else
            _index = table[0];

        var body = {};
        body.date = time;
        body.ts = ts;
        body.node = global.AppName; 
        body.type = type;
        body.seq = seq;
        body.srcTs = ts[1]; // 123_13242424
        body.srcName = _index;
        body.dataFlow = dataFlow;
        body.reserved = msg;
        //console.log('_index= '+_index.toLowerCase() + ' body= ' + JSON.stringify(body) );
        //g_els.insert_id(els_df_name, 'logs', seq, body );  
        //g_els.insert( _index.toLowerCase(), 'logs', body );   
    }

    //if ( typeof loginfo.dataflow.dynamic !== 'undefined' )
      //  console.log(data);

}




global.advLogWrite = function( level, msg, info )
{ 
    if( loginfo === 'undefined' || g_enabllog === 0 ) return;

    var full_msg    = '';
    var short_msg   = '';
    var time        = 'undefined';
    var _level      = 'undefined';
    var filename    = 'undefined';
    var linenum     =  'undefined';
    var fnName      = 'undefined';
      

    if( (typeof loginfo.default.dynamic != 'undefined' && loginfo.default.dynamic.level >= level ) || 
        (typeof loginfo.default.els  !== 'undefined' && loginfo.default.els.level >= level)         ||
        (typeof loginfo.default.static !== 'undefined' && loginfo.default.static.level >= level)    )
    {
        time = getISOTime();
        _level = LEVEL_MSG[level].n;

        full_msg = '[' + time +'] ['+_level + ']   ['+ info.filename + ','+ info.linenum + ','+ info.fnName + ']   ' + msg ;
        short_msg = '[' + time +'] [' + _level + ']   ' + msg;
    }
    else    
        return;

    // Print to console
    if( loginfo.default.dynamic.enable === 1 && loginfo.default.dynamic.level >= level &&　loginfo.default.dynamic.level !== 0 )
    {
        if(loginfo.default.dynamic.information === 1 )
            console.info(full_msg);
        else
            console.info(short_msg);
    }

    // save to log file
    
    if( loginfo.default.static.enable === 1 && loginfo.default.static.level >= level && loginfo.default.static.level !== 0 )
    {

        if(loginfo.default.static.information === 1 ){
            full_msg = full_msg + '\n';
            writelogstream.write(full_msg);
        } else {
            short_msg = short_msg + '\n';
            writelogstream.write(short_msg);
        }
    }   

    // elastic search
    /*
    if( typeof loginfo.default.els !== 'undefined' && loginfo.default.els.level >= level && loginfo.default.static.level !== 0 )
    {
        var body = {};
        body.date = time;
        body.level = level;
        body.filename = filename;
        body.method = fnName;
        body.lineNumber = linenum;
        body.message = msg;
        g_els.insert(els_dmg_name, 'logs', body );        
    }*/

    // combin to websocket 
};

var deleteFile = function(filepath)
{
    fs.unlink(filepath, function (err) {            
    if (err) {                                                 
         console.info(err);                                    
    }                                                          
       console.info('File has been Deleted');                           
    });    
}

var rmOldestFile = function()
{
    fs.readdir(loginfo.default.static.path, (err, files) => {
  
        if( files.length > loginfo.default.static.files ) {
            // to find oldest file and remove it
            var num = files.length - loginfo.default.static.files;
            var i = 0;
            //console.log('remove file num is ' + num);
            files.forEach(file => {
                if( i < num ) {
                    deleteFile(loginfo.default.static.path+'/'+file);
                    i ++;
                }else{
                    return;
                }
                //console.log(file);
              });
        }
    });
}



var initAdvLog = function(strConfig) {
    
    // log.json
    if( strConfig !== null || strConfig !== 'undefined') {
        try{
            loginfo = require(strConfig);
        }catch(e)
        {
            console.log('Load log.json failed');

        }
    } 

    // Default Value
    if( typeof loginfo == 'undefined' || loginfo === null || typeof loginfo.default === 'undefined' || typeof loginfo.default.static.path === 'undefined' )   {        
        loginfo = JSON.parse(deflogConfig);
    } else {
        // To check value is valid
        if( loginfo.default.static.buffer > ONE_MIN ) // max buffer is 60 sec, 1 min
            loginfo.default.static.buffer = ONE_MIN;

        if( loginfo.default.static.duration > ONE_DAY )
            loginfo.default.static.duration = ONE_DAY;
        
        if( loginfo.default.static.duration < ONE_MIN )
            loginfo.default.static.duration = ONE_MIN;
    }
    
    /* ElasticSearch
    if( typeof loginfo.default.els !== 'undefined' && typeof loginfo.default.els.server !== 'undefined' )
        elsServer = loginfo.default.els.server;
    else if( typeof loginfo.dataflow.els !== 'undefined' && typeof loginfo.dataflow.els.server !== 'undefined' )
        elsServer = loginfo.dataflow.els.server;
        
    // elasticsearch
    g_els.init(elsServer);    
    */

    // log file
    
    if( loginfo.default.static.enable === 1 ) {
        writelogstream = logfilestream({
            logdir: loginfo.default.static.path,        
            nameformat: 'YYYY-MM-DD-HH-mm-ss@{pid}[.log]',
            buffer: loginfo.default.static.buffer,
            duration: loginfo.default.static.duration,
            mkdir: true,
        });

    // enable remove function
    setInterval(function () {
        rmOldestFile();
      }, loginfo.default.static.duration)
    }
    
}


module.exports = initAdvLog;
